openapi: 3.0.0
info:
  title: API сервер для проекта "Guitar Shop".
  description: |-
    * список ресурсов и маршрутов сервера "Guitar Shop".
  license:
      name: MIT
      url: https://opensource.org/licenses/MIT
  version: 1.0.0

tags:
  - name: guitars
    description: Действия с объявлениями
  - name: users
    description: Действия с пользователем

paths:
  /register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        '201':
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newUser'

        '400':
          description: Пользователь с таким email уже существует.

  /login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля.

      requestBody:
        description: Информация для авторизации пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authUser'
        required: true

      responses:
        '200':
          description: Пользователь успешно авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        '401':
          description: Ошибка авторизации пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'

        '400':
          description: Введены неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по состоянию авторизовации пользователя на основе сессионного токена.

      parameters:
        - in: 'header'
          name: Токен пользователя
          schema:
             $ref: '#/components/schemas/token'
          required: true


      responses:
        '200':
          description: Пользователь успешно авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/newUser'

        '401':
          description: Ошибка авторизации пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'

  /logout:
    post:
      tags:
        - users
      summary: Завершение пользовательского сеанса
      description: Осуществляет завершение пользовательского сеанса и выход из закрытой части приложения.

      parameters:
        - in: header
          name: Токен пользователя
          schema:
            $ref: '#/components/schemas/token'
          required: true

      responses:
        '204':
          description: Сеанс завершён

  /guitars:
    get:
      tags:
        - guitars
      summary: Получение списка гитар по аренде
      description: Возвращает не больше 7 предложений, отсортированных по дате публикации (по убыванию)

      parameters:
        - in: header
          name: Токен пользователя
          schema:
            $ref: '#/components/schemas/token'
          required: false
        - in: query
          name: 'count'
          description: Запрашиваемое количество товаров
          schema:
            $ref: '#/components/schemas/count'
          required: false
        - in: query
          name: 'type'
          description: Фильтрация гитар по типу
          schema:
            $ref: '#/components/schemas/type'
          required: false
        - in: query
          name: 'strings'
          description: Фильтрация гитар количеству струн
          schema:
            $ref: '#/components/schemas/count'
          required: false
        - in: query
          name: 'sortOrder'
          description: Направление сортировки, по убыванию или по возрастанию
          schema:
            $ref: '#/components/schemas/sortOrder'
          required: false
        - in: query
          name: 'sortBy'
          description: Выбор типа сортировки, по цене или по дате
          schema:
            $ref: '#/components/schemas/sortBy'
          required: false

      responses:
        '200':
          description: Список предложений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitars'

    post:
      tags:
        - guitars
      summary: Добавление нового товара
      description: Добавляет новый товар от авторизованного пользователя.

      parameters:
        - in: header
          name: Токен пользователя
          schema:
            $ref: '#/components/schemas/token'
          required: true

      requestBody:
        description: Объект с новым товаром
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/newGuitar'
        required: true

      responses:
        '201':
          description: Новое предложений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitar'

        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'

        '401':
          description:  В доступе отказано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'

  /guitars/{guitarId}:
    get:
      tags:
        - guitars
      summary: Получение информации о товаре
      description: Предоставляет детальную информацию по конкретному товару на основе guitarId.

      parameters:
        - in: header
          name: Токен пользователя
          schema:
            $ref: '#/components/schemas/token'
          required: false
        - name: 'guitarId'
          in: path
          schema:
            $ref: '#/components/schemas/guitarId'
          required: true

      responses:
        '201':
          description: Объект товара
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitar'

        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'

        '404':
          description: Товар не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitarNotFoundError'

    post:
      tags:
        - guitars
      summary: Редактирование карточки товара
      description: Редактирует существующую карточку товара  на основе guitarId.

      parameters:
        - in: header
          name: Токен пользователя
          schema:
            $ref: '#/components/schemas/token'
          required: true
        - name: 'guitarId'
          in: path
          schema:
            $ref: '#/components/schemas/guitarId'
          required: true

      requestBody:
        description: Объект с отредактированным товаром
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newGuitar'
        required: true

      responses:
        '201':
          description: Новый товар
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitar'

        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationError'

        '401':
          description:  В доступе отказано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authError'

        '404':
          description: Товар не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitarNotFoundError'

    delete:
      tags:
        - guitars
      summary: Удаление товара
      description: Удаляет существующее предложение авторизованного пользователя  на основе offerId.

      parameters:
        - in: header
          name: Токен пользователя
          schema:
            $ref: '#/components/schemas/token'
          required: true
        - name: 'guitarId'
          in: path
          schema:
            $ref: '#/components/schemas/guitarId'
          required: true

      responses:
        '204':
          description: Товар успешно удален


        '404':
          description: Товар не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/guitarNotFoundError'


components:
  schemas:
    createUser:
      type: object

      properties:
        name:
          type: string
          example: Max

        email:
          type: string
          example: max@mail.ru

        password:
          type: string
          example: qwerty

    authUser:
      type: object

      properties:
        email:
          type: string
          example: max@mail.ru

        password:
          type: string
          example: qwerty

    authError:
      type: object

      properties:
        errorType:
          type: string
          example: COMMON_ERROR

        message:
          type: string
          example: В доступе отказано

    checkAuth:
      type: object

      properties:
        X-Token:
          type: string
          example: fFGfj34lfjkj635735=

    newUser:
      type: object

      properties:
        name:
          type: string
          example: Max

        email:
          type: string
          example: max@mail.ru

    user:
      type: object

      properties:
        name:
          type: string
          example: Max

        email:
          type: string
          example: max@mail.ru

        token:
          $ref: '#/components/schemas/token'

    guitarId:
      type: string
      example: dsds-dyut-ut87-hjkldfdfl54

    token:
      type: string
      example: fFGfj34lfjkj635735=

    count:
      type: number
      example: 45

    type:
      type: string
      example: 'ukulele'

    sortBy:
      type: string
      example: guitar

    sortOrder:
      type: string
      example: asc


    newGuitar:
      type: object

      properties:
        title:
          type: string
          example: 'ЭлектроГитара Честер bass'

        type:
          type: string
          example: 'el-guitar'

        price:
          type: number
          example: 120

        stringsCount:
          type: number
          example: 6

        description:
          type: string
          example: 'Beautiful & luxurious guitar'

        articul:
          type: string
          example: SO757575

        picture:
          type: object
          properties:
            path:
              type: string
              example: 'https://url-to-image/image.png'
            filename:
              type: string
              example: 'image.png'

        date:
          type: string
          example: '19.09.2022'

    guitar:
      type: object

      allOf:
        - $ref: '#/components/schemas/newGuitar'

      properties:
        id:
          type: string
          example: '6af6f711-c28d-4121-82cd-e0b462a27f00'

    guitars:
      type: array
      items:
        $ref: '#/components/schemas/guitar'


    guitarNotFoundError:
      type: object

      properties:
        errorType:
          type: string
          example: COMMON_ERROR
        message:
          type: string
          example: 'Товар с указанным guitarId не найден'

    validationError:
      type: object

      properties:
        errorType:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: 'Ошибка валидации данных'
